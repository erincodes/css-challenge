/*****************************************************
* CSS Mockup Activity - Custom CSS Stylesheet
* @author rlewis37
*
* Some rules have been included here to give you a head start.
* Create your own custom CSS rules below. Have fun!
******************************************************/

.container { /*grid structure that is required for bootstrap and other frameworks*/
	background-color: black;
	color: lawngreen;
	text-align: center;
	width: 100%;
}

.clearfix {
	clear: both; /*clears everything on right and left if you're using floats, Rochelle provided as a hint that we should use these.*/
}

/* create a responsive container depending on viewport width*/
/* default width is the full width of the viewport. Only as the screen gets larger, we progressively enhance.*/
@media only screen and (min-width: 1200px) {
	.container { width: 1170px; }
}

@media only screen and (min-width: 992px) and (max-width: 1199px) {
	.container { width: 970px; }
}

@media only screen and (min-width: 768px) and (max-width: 991px) {
	.container { width: 750px; }
}

/*****************************************************
* Flexbox Sticky Footer
* Sticks footer down below, even if the content above is short.
* http://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/
******************************************************/

/*corrects Internet Explorer (IE) min-height bug*/
html { display: flex;}
body { width: 100%;}

.sfooter {
	display: flex;
	flex-direction: column;
	min-height: 100vh;
	margin: 0 auto;
	padding: 0 2rem;
}

.sfooter-content {
	flex: 1 0 auto;
}

/*****************************************************
* ADD YOUR OWN CSS BELOW! (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧
*
* HINT: You might want to be conversant with the following:
* * Shorthand syntax for padding, margin, and borders
* * Display property and values... and the differences between them.
* * The Box Model
* * Pseudo Classes
* * Attribute Selectors
******************************************************/

/*****************************************************
* It's a good idea to make your CSS into sections and label as such with comments. Organization is key!
* Comes into play with specificity and inheritance as well.
* Order in which style sheets are loaded, then order of how your CSS rules appear, then specificity rules inherent to CSS.
******************************************************/

/*****************************************************
* global
******************************************************/
html, body {
	margin: 0;
	box-sizing: border-box; /*changes the way the box model behaves by default. Box model grows inside out. Affects padding and border. Margin refers to the outside of the box and is not affected by this. */
	font-family: courier New, monospace; /*monospaced fonts are used in computing, each letter takes up the same amount of space on the output*/
}

/*****************************************************
* header
******************************************************/

header {
	background-color: black;
	color: limegreen; /*color property affects the text color and the text border*/
	padding: 2rem 0; /*zero out padding on left and right*/
}

header h1 {
	margin: 0 2rem 0 0; /*zero out the margin on all sides of the h1 tag within the header tag*/
	display: inline-block; /*sit inline but perserve the box model of other elements. Hybrid! Could also use flex*/
}

/*****************************************************
* welcome gif
******************************************************/

.welcome-gif {
	display: block;
	margin: 0 auto; /*shorthand syntax, left and right auto-fit*/
	width: 50%;
}

/*****************************************************
* instructions
******************************************************/

/***Flexbox is one dimensional, organize elements in a column OR row. Grid is two dimensional, can do grid AND row.***/
.instructions-wrapper {
	display: flex; /* could do display: grid; instead. Native CSS grid, not the same as Bootstrap grid. Pretty new functionality.*/
	padding: 10px;
	margin: 60px auto;
	border: 6px solid black;
}

img[alt*="captain janeway"] { /*attribute selector*/
	flex: auto;
	max-width: 250px;
	/*max-height: 200px;*/
	align-self: start; /*a flex-box weird thing!*/
}

/*****************************************************
* a day in the life
******************************************************/

.about-me {
	display: auto;
	background-color: blue;
	color: white;
	padding: 20px;
}

img[alt*="captain picard"] { /*attribute selector*/
	float: left;
	border: solid white;
	margin: 20px;
}

.beauty-rest {  /*Could've used about-me span*/
	font-style: italic;
	font-weight: bold;
	color: yellow;
}

/*****************************************************
* professional skillz
******************************************************/

.skillz-header {  /* This is the 4th child of its parent, good way to write a selector. Could've done section: nth-chold(4) h2 */
	text-align: right;
	padding: 10px;
}


th, td {
	background-color: #000000; /*Include the background color and border here vs. on the table as a whole to avoid the "double white" lines*/
	border: 1px solid white;
	text-align: left;
	font-size: 1.5rem;
}

table { /* This selector would impact any and all tables throughout the site. Works in this case, since we just have one, but cuidado! */
	width: 80%;
	margin: 10px;
	padding: 10px;
	color: lawngreen;
}

/*****************************************************
* contact form
******************************************************/

.form-wrapper {  /*I could've used nth child 4 or last child to target the form section*/
	background-color: darkgreen;
	border: 20px solid black;
	color: lawngreen;
	padding: 2em;
}

.form-wrapper label, input, textarea {
	display: block;
	margin-bottom: 10px;
}

.form-wrapper input, textarea {
	width: 30%;
}

.form-wrapper button {
	background-color: lawngreen;
	color: black;
}

/*****************************************************
* footer
******************************************************/

footer {
	background-color: black;
	color: white;
	text-align: center;
}

